---
layout: post
category : misc
tagline: "草稿"
tags : [演讲稿]
---

## 大家好，我叫XXX，来自XXX部门XXX项目组，先做一下自我介绍，我今年是本科毕业5年，上一家公司是在XXX，负责业务架构，做的工作偏架构一些，比如订单推送Push服务，主要语言是C和PHP；到了Qunar之后呢，做的工作偏业务更多，语言也转向了Java。

## 这是今天演示的主要内容，首先我会讲一下自身对业务的理解，酒店系统的整体架构、QTA所处的位置，以及我主要负责的模块；第二个内容，介绍自己的项目经历，按时间从近到远，挑了3个有代表性的项目：搭售系统、自助改单、VCC，其中 搭售系统是我负责主力设计的，另有4个同学开发；第三个内容，是对未来工作的一些展望，仅仅是工作思路上一些展望。


## 业务总览
### 总体业务
QTA“承上启下”，哪些服务依赖QTA，QTA又依赖哪些服务。上层：用户端HDS www 无线、callcenter、ivr等；下层：支付中心、度假、团购、供应商业务系统。
### QTA业务概览
最上层：用户系统，服务入口。然后主要是三块：报价系统、成单核心、运营审核。报价分为 手工和api，手工依赖baseinfo，api的SPA依赖 供应商报价系统，同时SOA；成单分为 package biz core，依赖 支付中心、度假、团购；确认审核confirm 和 audit。最下层是存储。


## 先介绍下项目的演示方法
主要从3个方面来介绍项目。第一，背景，也就是为什么要做 Why；第二，方案，也就是 怎么做的 How，正常流程是什么样，异常情况如何考虑；第三，总结，项目有哪些优点，可取之处，有哪些待改进的地方。

## 搭售项目
### 背景
酒店填单页会同时搭售一些第三方报价，比如：保险(取消险、意外险)、团购产品(吃 喝 玩)，最早卖的是 取消险，取消险的数据揉在酒店订单数据里，酒店系统需要关心取消险业务的生命周期: 成单、支付、退款等等，耦合严重，不利于扩展。目标：把搭售的业务抽象出来，把各搭售品的业务数据，抽象出来单独存储，各搭售品和酒店订单数据独立，降低耦合，易于扩展。

### 方案 
#### 正常流程
抽象出搭售系统，负责搭售业务: 报价、成单、支付、取消等，与所有的第三方系统打交道，用户系统，只需要和 搭售系统 打交道，core系统，甚至不需要知道 搭售单的存在，专心负责酒店订单业务。
搭售系统内部架构，抽象出PackageManager，管理插件列表，每种搭售品，抽象成一个Plugin，管理自身业务。
#### 异常情况考虑
伪码表示， 以 报价、成单过程 为例。

### 优缺点
+ 搭售品抽象成插件；子单事务独立；子单资金独立。
- 插件上下线需要人工介入；插件增多，存储压力会增大。


## 自助修改订单
### 背景
改单需要客服介入，成本高、体验差。

### 方案
#### 正常流程 
判断能否改单 -> 改单报价列表 -> 用户选择一个 -> 改单报价详情 -> 成单
#### 异常考虑
抛错、监控；qConfig开关屏蔽入口；取消引发扣款的不允许变更。

### 优缺点
+ 结构清晰; 尽量重用老代码。
- 建议：增加 酒店确认环节。


## VCC
### 背景
酒店不认可Qunar担保，想快速收钱；个人信用卡 额度超限、无法控制刷卡时间额度 不安全；
目标：与银行合作，生成VCC，可以控制刷卡时间和额度。

### 方案
#### 正常流程
order-core状态机中实现 applyVcc、cancelVcc、changeVcc等；
VccService抽象，依赖它的模块。
#### 异常考虑
Action失败重试；非全额退款，无法作废VCC，选择相信酒店，对账可以追回。
#### 优缺点
+ VCC生命周期独立于老业务，低耦合
- VCC刷卡记录查询；提醒逾期不刷卡的酒店
